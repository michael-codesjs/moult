---
description: Overall project
globs: 
alwaysApply: false
---
# Project Overview
Moult is an innovative fashion platform that seamlessly integrates showcase, discovery, and commerce. It empowers fashion brands to exhibit their collections in immersive 3D, AR, and VR experiences, while also using AI to help users discover and refine their personal style.

**Goals:**  
- **For Brands:** Provide a user-friendly platform to create and manage immersive brand experiences.  
- **For Shoppers:** Offer an engaging, intuitive way to explore, discover, and purchase fashion collections.  
- **For Style Enthusiasts:** Use AI to deliver personalized style recommendations, helping users enhance their fashion sense.

**Vision:**  
Moult aims to redefine the digital fashion landscape by blending cutting-edge technology with creative design, making fashion more interactive, accessible, and personalized for both brands and consumers.

**Development Approach:**  
This project is a solo endeavor led by a developer experienced in backend engineering, frontend development, and design. The focus is on building a robust and visually engaging platform that meets the needs of both brands and consumers.

# **Personality:**  
- **Backend:** Emulate the efficiency and expertise of a 10x engineer, with a deep understanding of serverless architecture, microservices, domain-driven design, and object-oriented design patterns to build scalable and reliable systems.  
- **Frontend:** Demonstrate mastery in NextJS along with seasoned skills in WebGL and ThreeJS, ensuring the delivery of high-performance, interactive, and visually compelling user experiences.

# **TECHNICAL STACK:**

**Architecture & Organization:**
- **Pattern:** Domain-Driven Design (DDD) with layered architecture and Event Sourcing
- **Repository Structure:** Monorepo managed with Lerna
- **Main Runtime:** NodeJS
- **Event Architecture:** Event Sourcing with CQRS pattern

**Frontend:**
- **Framework:** NextJS, React, TypeScript
- **Styling:** TailwindCSS, clsx for component variants
- **Components:** Custom-built component library (no external UI libraries)
- **3D & Graphics:** ThreeJS, WebGL
- **Rendering Strategy:** 
  - Server-side rendering (SSR) by default
  - Client-side rendering (CSR) isolated to specific interactive components
  - Dynamic imports for CSR components to maintain SSR pages

**Backend:**
- **Runtime:** NodeJS
- **API Framework:** AppSync GraphQL
- **Authentication:** AWS Cognito (customized)
- **Database:** DynamoDB
- **Payments:** Stripe

**Infrastructure & DevOps:**
- **IaC:** Terraform for infrastructure provisioning
- **Serverless:** Serverless Framework for function deployment
- **Cloud Provider:** AWS (implied by serverless architecture)

**Design & UI:**
- **Design Tools:** Figma
- **CSS Framework:** TailwindCSS

# **Project Architecture**

**Layer Structure:**
- **Domain Layer:** Core business logic and entities
  - User domain
  - Product domain
  - Style domain
  - Brand domain
- **Experience Layer:** User-facing applications and services
  - Web client (NextJS)
  - Authentication services
  - API Gateway
- **Shared Layer:** Common utilities and types
  - TypeScript SDK
  - Shared utilities
  - Common types

**Development Practices:**
- **Code Organization:**
  - Each domain has its own bounded context
  - Services are organized by domain and layer
  - Shared code is maintained in the shared layer
  - Clear separation between domain logic and infrastructure

- **Frontend Development:**
  - Custom component library with variant support using clsx
  - Maximize SSR usage for better performance and SEO
  - Isolate CSR components to maintain SSR benefits
  - Consistent component patterns and styling approach
  - Reusable component variants through clsx utilities

- **Testing Strategy:**
  - Unit tests for domain logic
  - Integration tests for services
  - E2E tests for critical user flows
  - Test utilities in shared layer

- **Infrastructure:**
  - Infrastructure as Code using Terraform
  - Serverless functions deployed per domain
  - Event-driven architecture using AWS services
  - Event store for domain events and state management
  - Command and Query Responsibility Segregation (CQRS)

- **CI/CD:**
  - Automated deployments per environment
  - Infrastructure changes through Terraform
  - Service deployments via Serverless Framework
  - Monorepo management with Lerna

**Security Practices:**
- AWS Cognito for authentication
- Custom authorization flows
- Secure API access through AppSync
- Environment-based security controls

**Coding Standards:**
- TypeScript for type safety
- Domain-Driven Design principles
- Clean Architecture patterns
- SOLID principles
- Functional programming practices where appropriate

**Documentation:**
- Architecture Decision Records (ADRs)
- API documentation
- Infrastructure documentation
- Development setup guides

**Frontend Development Conventions:**
- **Component Structure:**
  - Atomic design principles (atoms, molecules, organisms)
  - Feature-based organization for domain-specific components
  - Shared UI components in dedicated library
  - Strong typing with TypeScript generics for component props
- **State Management:**
  - React Query for server state
  - React Context for global UI state
  - Local state for component-specific concerns
- **Performance Optimization:**
  - Image optimization using Next/Image
  - Font optimization with Next/Font
  - Bundle optimization with dynamic imports
  - Aggressive code splitting for routes

**Backend Development Conventions:**
- **Domain Service Structure:**
  - Command handlers in primary adapters
  - Event handlers in secondary adapters
  - Use cases contain core business logic
  - Repositories abstract data access
- **Event Sourcing Patterns:**
  - Event-first design
  - Aggregate roots as consistency boundaries
  - Event store as source of truth
  - Projections for read models
- **API Design:**
  - GraphQL schema-first approach
  - Strong typing with TypeScript
  - Consistent error handling patterns
  - Field-level authorization

**Error Handling & Logging:**
- **Error Categories:**
  - Domain errors (business rule violations)
  - Application errors (runtime issues)
  - Infrastructure errors (external service failures)
- **Logging Strategy:**
  - Structured logging with correlation IDs
  - Error context preservation
  - PII data masking
  - Log levels per environment

**Testing Conventions:**
- **Unit Tests:**
  - Jest for test runner
  - Given-When-Then pattern
  - Mock external dependencies
  - Test data builders
- **Integration Tests:**
  - Test against real AWS services
  - Local DynamoDB for data persistence
  - Wiremock for external APIs
  - Cleanup after each test
- **E2E Tests:**
  - Cypress for web client
  - Test critical user journeys
  - Visual regression testing
  - Performance benchmarking

**Development Workflow:**
- **Git Practices:**
  - Feature branch workflow
  - Conventional commits
  - Pull request templates
  - Branch naming conventions
- **Code Review Guidelines:**
  - Security review checklist
  - Performance impact assessment
  - Architecture consistency check
  - Documentation requirements

**Monitoring & Observability:**
- **Metrics:**
  - Business KPIs
  - Technical metrics
  - User experience metrics
  - Cost optimization metrics
- **Tracing:**
  - Distributed tracing across services
  - Performance bottleneck identification
  - Error tracking and correlation
  - User session tracking

**Security Practices:**
- **Data Protection:**
  - Encryption at rest and in transit
  - PII data handling procedures
  - Access control matrices
  - Security testing procedures
- **Compliance:**
  - GDPR requirements
  - Data retention policies
  - Privacy by design principles
  - Regular security audits

**Frontend Development Patterns:**
- **Component Organization:**
  - Pages in app directory following Next.js 13+ conventions
  - Layouts for consistent page structures
  - Loading and error states for each route
  - Route groups for feature organization
- **Component Composition:**
  - Higher-order components for cross-cutting concerns
  - Render props for flexible component APIs
  - Custom hooks for reusable logic
  - Context providers for shared state
- **State Management Patterns:**
  - Server state with React Query
  - Form state with controlled components
  - UI state with React Context
  - Animation state with Framer Motion
- **Performance Patterns:**
  - React.memo for expensive renders
  - useMemo for complex computations
  - useCallback for stable callbacks
  - Virtualization for long lists

**Backend Development Patterns:**
- **Service Layer Patterns:**
  - Command handlers for write operations
  - Query handlers for read operations
  - Event handlers for side effects
  - Sagas for distributed transactions
- **Repository Patterns:**
  - Generic repository interfaces
  - Specialized query methods
  - Optimistic concurrency control
  - Batch operations support
- **Event Sourcing Patterns:**
  - Event stream per aggregate
  - Snapshots for performance
  - Event upcasting for schema evolution
  - Event versioning strategy

**State Management:**
- **Frontend State:**
  - Server state caching strategy
  - Optimistic updates handling
  - Error state management
  - Loading state patterns
- **Backend State:**
  - Event store as source of truth
  - Read model projections
  - Cache invalidation strategy
  - Eventual consistency handling

**Project Organization:**
- **Directory Structure:**
  - Feature-based organization
  - Clear separation of concerns
  - Shared utilities location
  - Test file co-location
- **Code Sharing:**
  - Common type definitions
  - Shared validation rules
  - Utility functions
  - Constants and enums

**API Design Patterns:**
- **GraphQL Patterns:**
  - Schema organization
  - Resolver structure
  - Custom directives
  - Error handling
- **Query Patterns:**
  - Pagination implementation
  - Filtering patterns
  - Sorting patterns
  - Field selection

**Performance Optimization:**
- **Frontend:**
  - Code splitting strategy
  - Asset optimization
  - Caching strategy
  - Performance monitoring
- **Backend:**
  - Query optimization
  - Caching layers
  - Connection pooling
  - Resource scaling

**Error Handling Patterns:**
- **Frontend:**
  - Global error boundary
  - API error handling
  - Form validation errors
  - Retry mechanisms
- **Backend:**
  - Domain error types
  - Error propagation
  - Recovery mechanisms
  - Circuit breakers

**Security Patterns:**
- **Authentication:**
  - Token management
  - Session handling
  - Multi-factor auth
  - Social auth integration
- **Authorization:**
  - Role-based access control
  - Resource-level permissions
  - API scope management
  - Token validation

**Testing Patterns:**
- **Unit Testing:**
  - Test data factories
  - Mock strategies
  - Test categorization
  - Coverage goals
- **Integration Testing:**
  - Test containers
  - API testing
  - Database testing
  - Event testing
- **E2E Testing:**
  - User flow testing
  - Visual testing
  - Performance testing
  - Accessibility testing

# IMPORTANT
- Do not stop until the work is done.
- Do not make assumptions.
- Consider multiple perspectives.
- Use snake case for variable names, use camel case for function names.
- Use camel case for class names and function names, use snake case for variable names.
- Use typecript types instead of interfaces for normal types, only use interfaces for classes.